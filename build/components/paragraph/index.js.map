{"version":3,"file":"components/paragraph/index.js","mappings":"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","sources":["webpack://@app/minimal-block-ca6eda/./src/components/paragraph/edit.js","webpack://@app/minimal-block-ca6eda/./src/components/paragraph/save.js","webpack://@app/minimal-block-ca6eda/./src/base/styles/index.scss","webpack://@app/minimal-block-ca6eda/external window \"React\"","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"blockEditor\"]","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"blocks\"]","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"components\"]","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"i18n\"]","webpack://@app/minimal-block-ca6eda/webpack/bootstrap","webpack://@app/minimal-block-ca6eda/webpack/runtime/compat get default export","webpack://@app/minimal-block-ca6eda/webpack/runtime/define property getters","webpack://@app/minimal-block-ca6eda/webpack/runtime/hasOwnProperty shorthand","webpack://@app/minimal-block-ca6eda/webpack/runtime/make namespace object","webpack://@app/minimal-block-ca6eda/./src/components/paragraph/index.js"],"sourcesContent":["import { __ } from '@wordpress/i18n';\nimport { useBlockProps, RichText, InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, SelectControl, ColorPalette, TextControl } from '@wordpress/components';\n\nconst ParagraphEdit = ({ attributes, setAttributes }) => {\n    const {\n        content,\n        textAlign,\n        color,\n        fontWeight,\n        fontSize,\n        lineHeight,\n        fontFamily,\n        textTransform,\n        paddingLeft,\n        paddingRight,\n        backgroundColor,\n    } = attributes;\n\n    return (\n        <>\n            <InspectorControls>\n                <PanelBody title={__('Paragraph Settings', 'custom-paragraph')} initialOpen={true}>\n                    <SelectControl\n                        label={__('Text Align', 'custom-paragraph')}\n                        value={textAlign}\n                        options={[\n                            { label: 'Left', value: 'left' },\n                            { label: 'Center', value: 'center' },\n                            { label: 'Right', value: 'right' },\n                        ]}\n                        onChange={(newAlign) => setAttributes({ textAlign: newAlign })}\n                    />\n                    <ColorPalette\n                        label={__('Text Color', 'custom-paragraph')}\n                        value={color}\n                        onChange={(newColor) => setAttributes({ color: newColor })}\n                    />\n                     <ColorPalette\n                        label={__('Background Color', 'custom-paragraph')}\n                        value={backgroundColor}\n                        onChange={(newColor) => setAttributes({ color: newColor })}\n                    />\n                    <TextControl\n                        label={__('Font Size', 'custom-paragraph')}\n                        value={fontSize}\n                        onChange={(newSize) => setAttributes({ fontSize: newSize })}\n                        type=\"number\"\n                        min={0}\n                    />\n                    <TextControl\n                        label={__('Line Height', 'custom-paragraph')}\n                        value={lineHeight}\n                        onChange={(newHeight) => setAttributes({ lineHeight: newHeight })}\n                    />\n                    <TextControl\n                        label={__('Font Family', 'custom-paragraph')}\n                        value={fontFamily}\n                        onChange={(newFont) => setAttributes({ fontFamily: newFont })}\n                    />\n                    <SelectControl\n                        label={__('Font Weight', 'custom-paragraph')}\n                        value={fontWeight}\n                        options={[\n                            { label: 'Normal', value: '400' },\n                            { label: 'Bold', value: '700' },\n                            { label: 'Bolder', value: '900' },\n                        ]}\n                        onChange={(newWeight) => setAttributes({ fontWeight: newWeight })}\n                    />\n                    <SelectControl\n                        label={__('Text Transform', 'custom-paragraph')}\n                        value={textTransform}\n                        options={[\n                            { label: 'None', value: 'none' },\n                            { label: 'Uppercase', value: 'uppercase' },\n                            { label: 'Lowercase', value: 'lowercase' },\n                            { label: 'Capitalize', value: 'capitalize' },\n                        ]}\n                        onChange={(newTransform) => setAttributes({ textTransform: newTransform })}\n                    />\n                    {/* Padding Controls */}\n                    <TextControl\n                        label=\"Padding Left (rem)\"\n                        value={paddingLeft || 0}\n                        onChange={(value) => setAttributes({ paddingLeft: value })}\n                        type=\"number\"\n                        min={0}\n                    />\n                    <TextControl\n                        label=\"Padding Right (rem)\"\n                        value={paddingRight || 0}\n                        onChange={(value) => setAttributes({ paddingRight: value })}\n                        type=\"number\"\n                        min={0}\n                    />\n                </PanelBody>\n            </InspectorControls>\n\n            <RichText\n                {...useBlockProps({\n                    style: {\n                        color,\n                        fontWeight,\n                        fontSize,\n                        lineHeight,\n                        fontFamily,\n                        textTransform,\n                        textAlign,\n                        paddingLeft: `${paddingLeft || 3}rem`,\n                        paddingRight: `${paddingRight || 3}rem`,\n                        backgroundColor\n                    },\n                })}\n                tagName=\"p\"\n                value={content}\n                onChange={(newContent) => setAttributes({ content: newContent })}\n                placeholder={__('Enter paragraph text...', 'custom-paragraph')}\n            />\n        </>\n    );\n};\n\nexport default ParagraphEdit;\n","import { useBlockProps, RichText } from '@wordpress/block-editor';\n\nconst save = ({ attributes }) => {\n    const {\n        content,\n        textAlign,\n        color,\n        fontWeight,\n        fontSize,\n        lineHeight,\n        fontFamily,\n        textTransform,\n        paddingLeft,\n        paddingRight,\n    } = attributes;\n\n    return (\n        <div {...useBlockProps.save()} className=\"wp-paragraph\">\n            <RichText.Content\n                style={{\n                    color,\n                    fontWeight,\n                    fontSize,\n                    lineHeight,\n                    fontFamily,\n                    textTransform,\n                    textAlign,\n                    paddingLeft: `${paddingLeft || 48}px`,\n                    paddingRight: `${paddingRight || 48}px`,\n                }}\n                tagName=\"p\"\n                value={content}\n            />\n        </div>\n    );\n};\n\nexport default save;\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport Block from './block.json';\nimport Edit from './edit';\nimport Save from './save';\nimport '/src/base/styles/index.scss';\n\nregisterBlockType(Block.name, {\n    edit: Edit,\n    save: Save\n});"],"names":["__","useBlockProps","RichText","InspectorControls","PanelBody","SelectControl","ColorPalette","TextControl","ParagraphEdit","attributes","setAttributes","content","textAlign","color","fontWeight","fontSize","lineHeight","fontFamily","textTransform","paddingLeft","paddingRight","backgroundColor","createElement","Fragment","title","initialOpen","label","value","options","onChange","newAlign","newColor","newSize","type","min","newHeight","newFont","newWeight","newTransform","style","tagName","newContent","placeholder","save","className","Content","registerBlockType","Block","Edit","Save","name","edit"],"sourceRoot":""}