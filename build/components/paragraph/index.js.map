{"version":3,"file":"components/paragraph/index.js","mappings":"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","sources":["webpack://@app/minimal-block-ca6eda/./src/components/paragraph/edit.js","webpack://@app/minimal-block-ca6eda/./src/components/paragraph/save.js","webpack://@app/minimal-block-ca6eda/./src/base/styles/index.scss","webpack://@app/minimal-block-ca6eda/external window \"React\"","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"blockEditor\"]","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"blocks\"]","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"components\"]","webpack://@app/minimal-block-ca6eda/external window [\"wp\",\"i18n\"]","webpack://@app/minimal-block-ca6eda/webpack/bootstrap","webpack://@app/minimal-block-ca6eda/webpack/runtime/compat get default export","webpack://@app/minimal-block-ca6eda/webpack/runtime/define property getters","webpack://@app/minimal-block-ca6eda/webpack/runtime/hasOwnProperty shorthand","webpack://@app/minimal-block-ca6eda/webpack/runtime/make namespace object","webpack://@app/minimal-block-ca6eda/./src/components/paragraph/index.js"],"sourcesContent":["import { __ } from '@wordpress/i18n';\nimport { useBlockProps, RichText, InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody, SelectControl, ColorPalette, TextControl } from '@wordpress/components';\n\nconst ParagraphEdit = ({ attributes, setAttributes }) => {\n    const {\n        content,\n        textAlign,\n        color,\n        fontWeight,\n        fontSize,\n        lineHeight,\n        fontFamily,\n        textTransform\n    } = attributes;\n\n    return (\n        <>\n            <InspectorControls>\n                <PanelBody title={__('Paragraph Settings', 'custom-paragraph')}>\n                    {/* Text Align Control */}\n                    <SelectControl\n                        label={__('Text Align', 'custom-paragraph')}\n                        value={textAlign}\n                        options={[\n                            { label: 'Left', value: 'left' },\n                            { label: 'Center', value: 'center' },\n                            { label: 'Right', value: 'right' },\n                        ]}\n                        onChange={(newAlign) => setAttributes({ textAlign: newAlign })}\n                    />\n                    {/* Text Color Control */}\n                    <ColorPalette\n                        label={__('Text Color', 'custom-paragraph')}\n                        value={color}\n                        onChange={(newColor) => setAttributes({ color: newColor })}\n                    />\n                    {/* Font Size Control */}\n                    <TextControl\n                        label={__('Font Size', 'custom-paragraph')}\n                        value={fontSize}\n                        onChange={(newSize) => setAttributes({ fontSize: newSize })}\n                        type=\"number\"\n                        min={0}\n                    />\n                    {/* Line Height Control */}\n                    <TextControl\n                        label={__('Line Height', 'custom-paragraph')}\n                        value={lineHeight}\n                        onChange={(newHeight) => setAttributes({ lineHeight: newHeight })}\n                    />\n                    {/* Font Family Control */}\n                    <TextControl\n                        label={__('Font Family', 'custom-paragraph')}\n                        value={fontFamily}\n                        onChange={(newFont) => setAttributes({ fontFamily: newFont })}\n                    />\n                    {/* Font Weight Control */}\n                    <SelectControl\n                        label={__('Font Weight', 'custom-paragraph')}\n                        value={fontWeight}\n                        options={[\n                            { label: 'Normal', value: '400' },\n                            { label: 'Bold', value: '700' },\n                            { label: 'Bolder', value: '900' },\n                        ]}\n                        onChange={(newWeight) => setAttributes({ fontWeight: newWeight })}\n                    />\n                    {/* Text Transform Control */}\n                    <SelectControl\n                        label={__('Text Transform', 'custom-paragraph')}\n                        value={textTransform}\n                        options={[\n                            { label: 'None', value: 'none' },\n                            { label: 'Uppercase', value: 'uppercase' },\n                            { label: 'Lowercase', value: 'lowercase' },\n                            { label: 'Capitalize', value: 'capitalize' },\n                        ]}\n                        onChange={(newTransform) => setAttributes({ textTransform: newTransform })}\n                    />\n                </PanelBody>\n            </InspectorControls>\n\n            {/* Editable Paragraph Content */}\n            <RichText\n                {...useBlockProps({\n                    style: {\n                        color,\n                        fontWeight,\n                        fontSize,\n                        lineHeight,\n                        fontFamily,\n                        textTransform,\n                        textAlign,\n                    },\n                })}\n                tagName=\"p\"\n                value={content}\n                onChange={(newContent) => setAttributes({ content: newContent })}\n                placeholder={__('Enter paragraph text...', 'custom-paragraph')}\n            />\n        </>\n    );\n};\n\nexport default ParagraphEdit;\n","import { useBlockProps, RichText } from '@wordpress/block-editor';\n\nconst save = ({ attributes }) => {\n    const {\n        content,\n        textAlign,\n        color,\n        fontWeight,\n        fontSize,\n        lineHeight,\n        fontFamily,\n        textTransform\n    } = attributes;\n\n    return (\n        <div {...useBlockProps.save()} className=\"wp-paragraph\">\n            <RichText.Content\n                style={{\n                    color,\n                    fontWeight,\n                    fontSize,\n                    lineHeight,\n                    fontFamily,\n                    textTransform,\n                    textAlign,\n                }}\n                tagName=\"p\"\n                value={content}\n            />\n        </div>\n    );\n};\n\nexport default save;\n","// extracted by mini-css-extract-plugin\nexport {};","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport Block from './block.json';\nimport Edit from './edit';\nimport Save from './save';\nimport '/src/base/styles/index.scss';\n\nregisterBlockType(Block.name, {\n    edit: Edit,\n    save: Save\n});"],"names":["__","useBlockProps","RichText","InspectorControls","PanelBody","SelectControl","ColorPalette","TextControl","ParagraphEdit","attributes","setAttributes","content","textAlign","color","fontWeight","fontSize","lineHeight","fontFamily","textTransform","createElement","Fragment","title","label","value","options","onChange","newAlign","newColor","newSize","type","min","newHeight","newFont","newWeight","newTransform","style","tagName","newContent","placeholder","save","className","Content","registerBlockType","Block","Edit","Save","name","edit"],"sourceRoot":""}